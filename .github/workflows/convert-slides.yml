name: Convert HTML Slides to Images and PDFs

on:
  push:
    paths:
      - 'slides/**/*.html'
  pull_request:
    paths:
      - 'slides/**/*.html'
  workflow_dispatch:

jobs:
  convert-slides:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Allow the action to push commits
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Debug - List files
      run: |
        echo "Files in repository root:"
        ls -la
        echo "Package files:"
        ls -la package*

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install dependencies
      run: |
        if [ -f package-lock.json ]; then
          echo "Found package-lock.json, using npm ci"
          npm ci
        else
          echo "No package-lock.json found, installing puppeteer and pdf-lib directly"
          npm install puppeteer@^21.6.1 pdf-lib@^1.17.1
        fi

    - name: Install Chrome dependencies and Google Chrome
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          wget \
          gnupg \
          ca-certificates \
          procps \
          libxss1 \
          libxrandr2 \
          libasound2t64 \
          libpangocairo-1.0-0 \
          libatk1.0-0 \
          libcairo-gobject2 \
          libgtk-3-0 \
          libgdk-pixbuf2.0-0 \
          libdrm2 \
          libxcomposite1 \
          libxdamage1 \
          libxfixes3 \
          libxss1 \
          libxtst6 \
          libatspi2.0-0 \
          libappindicator3-1 \
          libnss3 \
          lsb-release
        
        # Install Google Chrome using the modern method
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo gpg --dearmor -o /usr/share/keyrings/googlechrome-linux-keyring.gpg
        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/googlechrome-linux-keyring.gpg] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list > /dev/null
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable

    - name: Check for HTML files in slides directory
      id: check-files
      run: |
        if [ "$(find slides -name '*.html' -type f | wc -l)" -gt 0 ]; then
          echo "has_html_files=true" >> $GITHUB_OUTPUT
          echo "Found HTML files to convert:"
          find slides -name '*.html' -type f
        else
          echo "has_html_files=false" >> $GITHUB_OUTPUT
          echo "No HTML files found in slides directory"
        fi

    - name: Convert HTML slides to images and PDFs
      if: steps.check-files.outputs.has_html_files == 'true'
      run: |
        node export.js slides
      env:
        PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: true
        PUPPETEER_EXECUTABLE_PATH: /usr/bin/google-chrome-stable

    - name: Check for generated files
      if: steps.check-files.outputs.has_html_files == 'true'
      run: |
        echo "Generated files:"
        find slides -name '*.png' -o -name '*.pdf' -type f | sort
        echo ""
        echo "All files in slides directory:"
        find slides -type f | sort
        echo ""
        echo "Git status before commit:"
        git status

    - name: Commit generated files
      if: steps.check-files.outputs.has_html_files == 'true'
      run: |
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
        git config --global --add safe.directory /github/workspace
        
        # Add all generated files
        echo "Adding all generated files to git..."
        git add slides/ || echo "No files to add in slides/"
        
        # Check if there are changes to commit
        echo "Git status after adding files:"
        git status
        
        if git diff --staged --quiet; then
          echo "No new files to commit"
        else
          # Generate commit message based on changed slide files
          echo "Generating commit message..."
          
          # Get list of HTML files that were changed (from the trigger)
          changed_slides=$(git diff --name-only HEAD~1 HEAD | grep 'slides/.*\.html$' | head -3)
          
          if [ -z "$changed_slides" ]; then
            # Fallback: find all HTML files in slides directory
            changed_slides=$(find slides -name '*.html' -type f | head -3)
          fi
          
          # Create commit message based on number of slides
          slide_count=$(echo "$changed_slides" | wc -l)
          
          if [ $slide_count -eq 1 ]; then
            slide_name=$(echo "$changed_slides" | head -1 | sed 's|slides/||' | sed 's|\.html$||')
            commit_msg="Export of slide $slide_name to pdf & image"
          else
            commit_msg="Export of $slide_count slides to pdf & image"
          fi
          
          echo "Committing with message: $commit_msg"
          git commit -m "$commit_msg"
          
          echo "Pulling latest changes before push..."
          git pull origin main --no-edit || {
            echo "Pull failed, checking for conflicts..."
            git status
            exit 1
          }
          
          echo "Pushing to remote..."
          git push origin main || {
            echo "Push failed, checking status..."
            git status
            git log --oneline -5
            exit 1
          }
        fi

    - name: Create summary
      if: steps.check-files.outputs.has_html_files == 'true'
      run: |
        echo "## Slide Conversion Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Generated Files:" >> $GITHUB_STEP_SUMMARY
        
        html_count=$(find slides -name '*.html' -type f | wc -l)
        png_count=$(find slides -name '*.png' -type f | wc -l)
        pdf_count=$(find slides -name '*.pdf' -type f | wc -l)
        
        echo "- 📄 HTML slides: $html_count" >> $GITHUB_STEP_SUMMARY
        echo "- 🖼️  PNG images: $png_count" >> $GITHUB_STEP_SUMMARY
        echo "- 📋 PDF files: $pdf_count" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ $html_count -gt 0 ]; then
          echo "### Processed Files:" >> $GITHUB_STEP_SUMMARY
          find slides -name '*.html' -type f | while read file; do
            dir=$(dirname "$file")
            basename=$(basename "$file" .html)
            echo "- \`$file\` → \`${dir}/${basename}.png\` + \`${dir}/${basename}.pdf\`" >> $GITHUB_STEP_SUMMARY
          done
        fi